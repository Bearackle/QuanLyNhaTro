/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view.admin;

import java.awt.Component;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import static javax.management.Query.gt;
import static javax.management.Query.lt;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;
import model.Contract;
import view.CustomControl.TableCellAction2;
import view.CustomControl.tablecellRenderFor3item;

/**
 *
 * @author Admin
 */
public class ContractCustomer extends javax.swing.JPanel {
    private DefaultTableModel tableModel;
    private TableRowSorter sorter;
    /**
     * Creates new form ContractCustomer
     */
    public ContractCustomer() {
        initComponents();
        txtFilter.setLabelText("Tìm kiếm hợp đồng");
        tableModel = (DefaultTableModel) table.getModel();
        sorter = new TableRowSorter<>(tableModel);
        txtFilter.getDocument().addDocumentListener(new DocumentListener(){
            @Override
            public void insertUpdate(DocumentEvent e) {
                 initFilter();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                initFilter();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
         }
        });
        table.setRowSorter(sorter);
    }
    public void initDataTable(ArrayList<Contract> contracts){
         table.getColumnModel().getColumn(10).setCellRenderer(new tablecellRenderFor3item("icon/accept.svg icon/delete.svg icon/edit.svg"));
         tableModel.setRowCount(0);
        for(Contract con : contracts){
            tableModel.addRow(new Object[]{"#"+con.getID(),"@"+con.getCustomerCCCD(),con.getCustomerName(),"#"+con.getRoomID()
            ,con.getDuration(),con.getPrice(),con.getSigned_date().toString(),con.isStatus(),con.getElecticPrice()+" vnd",con.getWaterPrice()+" vnd"});
        }
        table.setModel(tableModel);
        setWidthCellChange();
    }
    public void setWidthCellChange(){
        table.setAutoResizeMode( JTable.AUTO_RESIZE_OFF );
        for (int column = 0; column < table.getColumnCount(); column++)
        {
            TableColumn tableColumn = table.getColumnModel().getColumn(column);
            int preferredWidth = table.getTableHeader().getColumnModel().getColumn(column).getWidth();
            int maxWidth = tableColumn.getMaxWidth();

            for (int row = 0; row < table.getRowCount(); row++)
                {
                    TableCellRenderer cellRenderer = table.getCellRenderer(row, column);
                    Component c = table.prepareRenderer(cellRenderer, row, column);
                    int width = c.getPreferredSize().width + table.getIntercellSpacing().width;
                    preferredWidth = Math.max(preferredWidth, width);

                    if (preferredWidth >= maxWidth)
                    {
                        preferredWidth = maxWidth;
                        break;
                    }
                }
            tableColumn.setPreferredWidth( preferredWidth );
        }
    }
    private void initFilter(){
        RowFilter<DefaultTableModel,Object> rowFilter = null;
        try{
            rowFilter = RowFilter.regexFilter(txtFilter.getText(), 2);
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorter.setRowFilter(rowFilter);
    }
    public int getSelectionIndex(){
        return table.convertRowIndexToModel(table.getSelectedRow());
    }
    public void setActionListenerFortablebtn(ActionListener listener, ActionListener listener1,ActionListener listener2){
         table.getColumnModel().getColumn(10).setCellEditor(new TableCellAction2(listener,listener1,listener2, "icon/accept.svg icon/delete.svg icon/edit.svg"));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtFilter = new view.CustomControl.TextField();

        setBackground(new java.awt.Color(255, 255, 255));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã hợp đồng", "Mã Khách hàng", "Tên Khách hàng", "Mã phòng", "Kỳ Hạn", "Giá", "Ngày ký", "Trạng thái", "Giá điện", "Giá nước", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(50);
        jScrollPane1.setViewportView(table);

        jLabel1.setText("Hợp đồng thuê phòng");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 151, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private view.CustomControl.TextField txtFilter;
    // End of variables declaration//GEN-END:variables
}
